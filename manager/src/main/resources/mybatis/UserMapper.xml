<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.crowd.funding.manager.dao.UserMapper">
	<!--定义resultMap,即封装好User实体类中的字段,直接调用就可以-->
	<resultMap id="BaseResultMap" type="com.crowd.funding.bean.User">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="loginacct" property="loginacct" jdbcType="VARCHAR" />
		<result column="userpswd" property="userpswd" jdbcType="CHAR" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="CHAR" />
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from t_user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.crowd.funding.bean.User" useGeneratedKeys="true" keyProperty="id">
		insert into t_user (id,
		loginacct, userpswd,
		username, email, createtime
		)
		values
		(#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR},
		#{userpswd,jdbcType=CHAR},
		#{username,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
		)
	</insert>
	<update id="updateByPrimaryKey" parameterType="com.crowd.funding.bean.User">
		update t_user
		set
		loginacct = #{loginacct,jdbcType=VARCHAR},
		username = #{username,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select id, loginacct, userpswd, username, email,
		createtime
		from t_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user
	</select>

	<!--查询登录的语句-->
	<select id="queryLogin" parameterType="map" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user where loginacct=#{loginacct} and userpswd=#{userpswd}
	</select>

<!--	 获取当前页的数据
	<select id="queryList" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user limit #{startIndex},#{pageSize}
	</select>

	&lt;!&ndash; 获取总记录数 &ndash;&gt;
	<select id="queryCount" resultType="int" >
		select count(*)
		from t_user
	</select>-->

	<!-- 获取当前页的数据-->
	<select id="queryList" resultMap="BaseResultMap">
		select id, loginacct, userpswd,
		username, email, createtime
		from t_user
		<where>
			<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
		order by createtime desc
		limit #{startIndex},#{pageSize}
	</select>

	<!-- 获取总记录数 -->
	<select id="queryCount" resultType="int" >
		select count(*)
		from t_user
		<where>
			<if test="queryText!=null">loginacct like concat("%",#{queryText},"%")</if>
		</where>
	</select>
	<!-- 批量删除用户数据的方法-前端页面为JSON格式
		 如果Mapper接口参数类型为Collection集合,那么,可以使用list来获取这个集合参数.
	 	如果Mapper接口参数类型为Array数组,那么,可以使用array来获取这个数组参数.-->
	<delete id="deleteBatchUserByVO" >
		delete from t_user where id in
		<foreach collection="userList" open="(" close=")" separator="," item="user">
			#{user.id}
		</foreach>
	</delete>

	<!--&lt;!&ndash; 批量删除用户数据的方法-前端页面为JSON格式&ndash;&gt;-->
	<!--<delete id="deleteBatchUserByVO" >-->
	<!--	delete from t_user where id in-->
	<!--	<foreach collection="datas" open="(" close=")" separator="," item="user">-->
	<!--		#{user.id}-->
	<!--	</foreach>-->
	<!--</delete>-->

	<!--    查询所有的角色-->
	<select id="queryRole" resultType="Role">
		select * from t_role
	</select>
	<!--     得到已经分配给用户的角色id-->
	<select id="queryRoleByUserId" parameterType="int" resultType="int">
		select roleid from t_user_role where userid=#{id}
	</select>
	<!--   调用给用户分配角色的方法-->
	<insert id="saveUserRoleRelationship">
		<foreach collection="data.ids" item="roleid" separator=";">
			insert into t_user_role(userid,roleid) values(#{userId},#{roleid})
		</foreach>

	</insert>

	<!--调用取消分配角色的方法-->
	<delete id="deleteUserRoleRelationship">
		delete from t_user_role where userid=#{userId} and roleid in
		<foreach collection="data.ids" item="roleid" open="(" separator="," close=")">
			#{roleid}
		</foreach>
	</delete>
	<!-- 查询登录用户的权限-->
	<select id="queryPermissionByUserId" parameterType="int" resultType="Permission">
		select distinct t_permission.id, t_permission.pid,t_permission.name,t_permission.icon,t_permission.url
		from t_permission,t_role_permission,t_role,t_user_role,t_user
		where
		t_permission.id = t_role_permission.permissionid
		and t_role_permission.roleid = t_role.id
		and t_role.id = t_user_role.roleid
		and t_user_role.userid = t_user.id
		and t_user.id=#{userId} order by  t_permission.id
	</select>

<!--	用户注册的方法-->
	<insert id="insertUser" parameterType="com.crowd.funding.bean.User" useGeneratedKeys="true" keyProperty="id">
		insert into t_user (id,
			loginacct, userpswd,
			username, email, createtime
		)
		values
		(
			#{id,jdbcType=INTEGER}, #{loginacct,jdbcType=VARCHAR},
			#{userpswd,jdbcType=CHAR},
			#{username,jdbcType=VARCHAR},
			#{email,jdbcType=VARCHAR}, #{createtime,jdbcType=CHAR}
		)
	</insert>
</mapper>